
Avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6d  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f14  00000000  00000000  000025a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  000034b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000870  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ea6  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_1>
   8:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_2>
   c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_10>
  2c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/gpio/gpio.h"
uint8_t counter = 0, first, second;
int main(void) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	
	Port_Direction(C, Output); // Initialize port C as Output
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	0e 94 2a 02 	call	0x454	; 0x454 <Port_Direction>

	Pin_config_t Choose1, Choose2;
	Choose1.direction = Output;
  ae:	01 e0       	ldi	r16, 0x01	; 1
  b0:	0b 83       	std	Y+3, r16	; 0x03
	Choose1.logic = Low;
  b2:	1c 82       	std	Y+4, r1	; 0x04
	Choose1.pin = 6;
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	8a 83       	std	Y+2, r24	; 0x02
	Choose1.port = D;
  b8:	13 e0       	ldi	r17, 0x03	; 3
  ba:	19 83       	std	Y+1, r17	; 0x01
	Pin_logic_init(&Choose1);
  bc:	ce 01       	movw	r24, r28
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>

	Choose2.direction = Output;
  c4:	0f 83       	std	Y+7, r16	; 0x07
	Choose2.logic = Low;
  c6:	18 86       	std	Y+8, r1	; 0x08
	Choose2.pin = 7;
  c8:	87 e0       	ldi	r24, 0x07	; 7
  ca:	8e 83       	std	Y+6, r24	; 0x06
	Choose2.port = D;
  cc:	1d 83       	std	Y+5, r17	; 0x05
	Pin_logic_init(&Choose2);
  ce:	ce 01       	movw	r24, r28
  d0:	05 96       	adiw	r24, 0x05	; 5
  d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>

	while (1) {
		first = counter / 10;
  d6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	8d ec       	ldi	r24, 0xCD	; 205
  dc:	98 9f       	mul	r25, r24
  de:	81 2d       	mov	r24, r1
  e0:	11 24       	eor	r1, r1
  e2:	86 95       	lsr	r24
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <first>
		second = counter % 10;
  ec:	88 0f       	add	r24, r24
  ee:	28 2f       	mov	r18, r24
  f0:	22 0f       	add	r18, r18
  f2:	22 0f       	add	r18, r18
  f4:	82 0f       	add	r24, r18
  f6:	98 1b       	sub	r25, r24
  f8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <second>

		// Display first digit
		Choose1.logic = High;
  fc:	11 e0       	ldi	r17, 0x01	; 1
  fe:	1c 83       	std	Y+4, r17	; 0x04
		Choose2.logic = Low;
 100:	18 86       	std	Y+8, r1	; 0x08
		Pin_logic_init(&Choose1);
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>
		Pin_logic_init(&Choose2);
 10a:	ce 01       	movw	r24, r28
 10c:	05 96       	adiw	r24, 0x05	; 5
 10e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>
		Port_Set(C, first);
 112:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <first>
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 14 02 	call	0x428	; 0x428 <Port_Set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f e7       	ldi	r18, 0x7F	; 127
 11e:	88 e3       	ldi	r24, 0x38	; 56
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x90>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x9a>
 12c:	00 00       	nop

		_delay_ms(50);

		// Display second digit
		Choose1.logic = Low;
 12e:	1c 82       	std	Y+4, r1	; 0x04
		Choose2.logic = High;
 130:	18 87       	std	Y+8, r17	; 0x08
		Pin_logic_init(&Choose1);
 132:	ce 01       	movw	r24, r28
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>
		Pin_logic_init(&Choose2);
 13a:	ce 01       	movw	r24, r28
 13c:	05 96       	adiw	r24, 0x05	; 5
 13e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Pin_logic_init>
		Port_Set(C, second);
 142:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <second>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 14 02 	call	0x428	; 0x428 <Port_Set>
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	88 e3       	ldi	r24, 0x38	; 56
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0xc0>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xca>
 15c:	00 00       	nop

		_delay_ms(50);

		counter++;
 15e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (counter >= 100) {
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	08 f4       	brcc	.+2      	; 0x16e <main+0xdc>
 16c:	b4 cf       	rjmp	.-152    	; 0xd6 <main+0x44>
			counter = 0;
 16e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	b1 cf       	rjmp	.-158    	; 0xd6 <main+0x44>

00000174 <__vector_16>:

/**
 * @brief ADC Conversion Complete Interrupt Service Routine.
 * This function is called when an ADC conversion is complete.
 */
ISR(ADC_vect) {
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
    adc_result = ADC;
 182:	84 b1       	in	r24, 0x04	; 4
 184:	95 b1       	in	r25, 0x05	; 5
 186:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <adc_result+0x1>
 18a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <adc_result>
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <Pin_Set>:
            break;
        default:
            return NOK;
    }
    return ROK;
}
 19c:	fc 01       	movw	r30, r24
 19e:	89 2b       	or	r24, r25
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <Pin_Set+0x8>
 1a2:	45 c0       	rjmp	.+138    	; 0x22e <Pin_Set+0x92>
 1a4:	80 81       	ld	r24, Z
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <Pin_Set+0x38>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <Pin_Set+0x1a>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	09 f1       	breq	.+66     	; 0x1f2 <Pin_Set+0x56>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	71 f1       	breq	.+92     	; 0x210 <Pin_Set+0x74>
 1b4:	3e c0       	rjmp	.+124    	; 0x232 <Pin_Set+0x96>
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 80       	ldd	r0, Z+1	; 0x01
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Pin_Set+0x28>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Pin_Set+0x24>
 1c8:	82 2b       	or	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	83 83       	std	Z+3, r24	; 0x03
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	28 b3       	in	r18, 0x18	; 24
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	01 80       	ldd	r0, Z+1	; 0x01
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <Pin_Set+0x46>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <Pin_Set+0x42>
 1e6:	82 2b       	or	r24, r18
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	83 83       	std	Z+3, r24	; 0x03
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 80       	ldd	r0, Z+1	; 0x01
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Pin_Set+0x64>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Pin_Set+0x60>
 204:	82 2b       	or	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	83 83       	std	Z+3, r24	; 0x03
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	22 b3       	in	r18, 0x12	; 18
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 80       	ldd	r0, Z+1	; 0x01
 218:	02 c0       	rjmp	.+4      	; 0x21e <Pin_Set+0x82>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <Pin_Set+0x7e>
 222:	82 2b       	or	r24, r18
 224:	82 bb       	out	0x12, r24	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	83 83       	std	Z+3, r24	; 0x03
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	08 95       	ret

00000236 <Pin_Clear>:
 236:	fc 01       	movw	r30, r24
 238:	89 2b       	or	r24, r25
 23a:	09 f4       	brne	.+2      	; 0x23e <Pin_Clear+0x8>
 23c:	45 c0       	rjmp	.+138    	; 0x2c8 <Pin_Clear+0x92>
 23e:	80 81       	ld	r24, Z
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	a9 f0       	breq	.+42     	; 0x26e <Pin_Clear+0x38>
 244:	28 f0       	brcs	.+10     	; 0x250 <Pin_Clear+0x1a>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	09 f1       	breq	.+66     	; 0x28c <Pin_Clear+0x56>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	71 f1       	breq	.+92     	; 0x2aa <Pin_Clear+0x74>
 24e:	3e c0       	rjmp	.+124    	; 0x2cc <Pin_Clear+0x96>
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 80       	ldd	r0, Z+1	; 0x01
 258:	02 c0       	rjmp	.+4      	; 0x25e <Pin_Clear+0x28>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <Pin_Clear+0x24>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	8b bb       	out	0x1b, r24	; 27
 268:	13 82       	std	Z+3, r1	; 0x03
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	08 95       	ret
 26e:	28 b3       	in	r18, 0x18	; 24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 80       	ldd	r0, Z+1	; 0x01
 276:	02 c0       	rjmp	.+4      	; 0x27c <Pin_Clear+0x46>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <Pin_Clear+0x42>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
 286:	13 82       	std	Z+3, r1	; 0x03
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 80       	ldd	r0, Z+1	; 0x01
 294:	02 c0       	rjmp	.+4      	; 0x29a <Pin_Clear+0x64>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <Pin_Clear+0x60>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	13 82       	std	Z+3, r1	; 0x03
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	22 b3       	in	r18, 0x12	; 18
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 80       	ldd	r0, Z+1	; 0x01
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <Pin_Clear+0x82>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <Pin_Clear+0x7e>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	82 bb       	out	0x12, r24	; 18
 2c2:	13 82       	std	Z+3, r1	; 0x03
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	08 95       	ret
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret

000002d0 <Pin_Direction>:
 2d0:	fc 01       	movw	r30, r24
 2d2:	89 2b       	or	r24, r25
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <Pin_Direction+0x8>
 2d6:	84 c0       	rjmp	.+264    	; 0x3e0 <Pin_Direction+0x110>
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
 2da:	81 11       	cpse	r24, r1
 2dc:	41 c0       	rjmp	.+130    	; 0x360 <Pin_Direction+0x90>
 2de:	80 81       	ld	r24, Z
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	a1 f0       	breq	.+40     	; 0x30c <Pin_Direction+0x3c>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <Pin_Direction+0x20>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	f9 f0       	breq	.+62     	; 0x328 <Pin_Direction+0x58>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	59 f1       	breq	.+86     	; 0x344 <Pin_Direction+0x74>
 2ee:	7a c0       	rjmp	.+244    	; 0x3e4 <Pin_Direction+0x114>
 2f0:	2a b3       	in	r18, 0x1a	; 26
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 80       	ldd	r0, Z+1	; 0x01
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <Pin_Direction+0x2e>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <Pin_Direction+0x2a>
 302:	80 95       	com	r24
 304:	82 23       	and	r24, r18
 306:	8a bb       	out	0x1a, r24	; 26
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	27 b3       	in	r18, 0x17	; 23
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 80       	ldd	r0, Z+1	; 0x01
 314:	02 c0       	rjmp	.+4      	; 0x31a <Pin_Direction+0x4a>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Pin_Direction+0x46>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	87 bb       	out	0x17, r24	; 23
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
 328:	24 b3       	in	r18, 0x14	; 20
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	01 80       	ldd	r0, Z+1	; 0x01
 330:	02 c0       	rjmp	.+4      	; 0x336 <Pin_Direction+0x66>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <Pin_Direction+0x62>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	84 bb       	out	0x14, r24	; 20
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
 344:	21 b3       	in	r18, 0x11	; 17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 80       	ldd	r0, Z+1	; 0x01
 34c:	02 c0       	rjmp	.+4      	; 0x352 <Pin_Direction+0x82>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <Pin_Direction+0x7e>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	81 bb       	out	0x11, r24	; 17
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <Pin_Direction+0x96>
 364:	41 c0       	rjmp	.+130    	; 0x3e8 <Pin_Direction+0x118>
 366:	80 81       	ld	r24, Z
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	99 f0       	breq	.+38     	; 0x392 <Pin_Direction+0xc2>
 36c:	28 f0       	brcs	.+10     	; 0x378 <Pin_Direction+0xa8>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	e9 f0       	breq	.+58     	; 0x3ac <Pin_Direction+0xdc>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	41 f1       	breq	.+80     	; 0x3c6 <Pin_Direction+0xf6>
 376:	3a c0       	rjmp	.+116    	; 0x3ec <Pin_Direction+0x11c>
 378:	2a b3       	in	r18, 0x1a	; 26
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 80       	ldd	r0, Z+1	; 0x01
 380:	02 c0       	rjmp	.+4      	; 0x386 <Pin_Direction+0xb6>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <Pin_Direction+0xb2>
 38a:	82 2b       	or	r24, r18
 38c:	8a bb       	out	0x1a, r24	; 26
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret
 392:	27 b3       	in	r18, 0x17	; 23
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	01 80       	ldd	r0, Z+1	; 0x01
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Pin_Direction+0xd0>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <Pin_Direction+0xcc>
 3a4:	82 2b       	or	r24, r18
 3a6:	87 bb       	out	0x17, r24	; 23
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	24 b3       	in	r18, 0x14	; 20
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	01 80       	ldd	r0, Z+1	; 0x01
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Pin_Direction+0xea>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <Pin_Direction+0xe6>
 3be:	82 2b       	or	r24, r18
 3c0:	84 bb       	out	0x14, r24	; 20
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	21 b3       	in	r18, 0x11	; 17
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	01 80       	ldd	r0, Z+1	; 0x01
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Pin_Direction+0x104>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Pin_Direction+0x100>
 3d8:	82 2b       	or	r24, r18
 3da:	81 bb       	out	0x11, r24	; 17
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	08 95       	ret
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret

000003f0 <Pin_logic_init>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
 3f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Pin_Direction>
 3fa:	20 97       	sbiw	r28, 0x00	; 0
 3fc:	79 f0       	breq	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	81 11       	cpse	r24, r1
 402:	05 c0       	rjmp	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	ce 01       	movw	r24, r28
 406:	0e 94 1b 01 	call	0x236	; 0x236 <Pin_Clear>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0a c0       	rjmp	.+20     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	39 f4       	brne	.+14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 412:	ce 01       	movw	r24, r28
 414:	0e 94 ce 00 	call	0x19c	; 0x19c <Pin_Set>
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	01 c0       	rjmp	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <Port_Set>:
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	49 f0       	breq	.+18     	; 0x43e <Port_Set+0x16>
 42c:	28 f0       	brcs	.+10     	; 0x438 <Port_Set+0x10>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	49 f0       	breq	.+18     	; 0x444 <Port_Set+0x1c>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	51 f0       	breq	.+20     	; 0x44a <Port_Set+0x22>
 436:	0c c0       	rjmp	.+24     	; 0x450 <Port_Set+0x28>
 438:	6b bb       	out	0x1b, r22	; 27
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	68 bb       	out	0x18, r22	; 24
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret
 444:	65 bb       	out	0x15, r22	; 21
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	08 95       	ret

00000454 <Port_Direction>:

/**
 * @brief Sets the direction of the entire port (input or output).
 */
Std_return Port_Direction(char port, Direction_t direction) {
    switch (port) {
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	71 f0       	breq	.+28     	; 0x474 <Port_Direction+0x20>
 458:	28 f0       	brcs	.+10     	; 0x464 <Port_Direction+0x10>
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	99 f0       	breq	.+38     	; 0x484 <Port_Direction+0x30>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	c9 f0       	breq	.+50     	; 0x494 <Port_Direction+0x40>
 462:	20 c0       	rjmp	.+64     	; 0x4a4 <Port_Direction+0x50>
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
 464:	61 30       	cpi	r22, 0x01	; 1
 466:	11 f4       	brne	.+4      	; 0x46c <Port_Direction+0x18>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	01 c0       	rjmp	.+2      	; 0x46e <Port_Direction+0x1a>
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	8a bb       	out	0x1a, r24	; 26
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 470:	80 e0       	ldi	r24, 0x00	; 0
 */
Std_return Port_Direction(char port, Direction_t direction) {
    switch (port) {
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
            break;
 472:	08 95       	ret
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
 474:	61 30       	cpi	r22, 0x01	; 1
 476:	11 f4       	brne	.+4      	; 0x47c <Port_Direction+0x28>
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	01 c0       	rjmp	.+2      	; 0x47e <Port_Direction+0x2a>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	87 bb       	out	0x17, r24	; 23
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 480:	80 e0       	ldi	r24, 0x00	; 0
        case A:
            DDRA = (direction == Output) ? 0xFF : 0x00;
            break;
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
            break;
 482:	08 95       	ret
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
 484:	61 30       	cpi	r22, 0x01	; 1
 486:	11 f4       	brne	.+4      	; 0x48c <Port_Direction+0x38>
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	01 c0       	rjmp	.+2      	; 0x48e <Port_Direction+0x3a>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	84 bb       	out	0x14, r24	; 20
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
        default:
            return NOK;
    }
    return ROK;
 490:	80 e0       	ldi	r24, 0x00	; 0
        case B:
            DDRB = (direction == Output) ? 0xFF : 0x00;
            break;
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
            break;
 492:	08 95       	ret
        case D:
            DDRD = (direction == Output) ? 0xFF : 0x00;
 494:	61 30       	cpi	r22, 0x01	; 1
 496:	11 f4       	brne	.+4      	; 0x49c <Port_Direction+0x48>
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	01 c0       	rjmp	.+2      	; 0x49e <Port_Direction+0x4a>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	81 bb       	out	0x11, r24	; 17
            break;
        default:
            return NOK;
    }
    return ROK;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
        case C:
            DDRC = (direction == Output) ? 0xFF : 0x00;
            break;
        case D:
            DDRD = (direction == Output) ? 0xFF : 0x00;
            break;
 4a2:	08 95       	ret
        default:
            return NOK;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
    }
    return ROK;
}
 4a6:	08 95       	ret

000004a8 <__vector_1>:
		break;
	}
}

// ISR for INT0
ISR(INT0_vect) {
 4a8:	1f 92       	push	r1
 4aa:	0f 92       	push	r0
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	0f 92       	push	r0
 4b0:	11 24       	eor	r1, r1
 4b2:	2f 93       	push	r18
 4b4:	3f 93       	push	r19
 4b6:	4f 93       	push	r20
 4b8:	5f 93       	push	r21
 4ba:	6f 93       	push	r22
 4bc:	7f 93       	push	r23
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
 4c2:	af 93       	push	r26
 4c4:	bf 93       	push	r27
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	if (ExtInt0_Callback != 0) {
 4ca:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <ExtInt0_Callback>
 4ce:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <ExtInt0_Callback+0x1>
 4d2:	30 97       	sbiw	r30, 0x00	; 0
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__vector_1+0x30>
		ExtInt0_Callback();
 4d6:	09 95       	icall
	}
	GICR|=1<<6;
 4d8:	8b b7       	in	r24, 0x3b	; 59
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	8b bf       	out	0x3b, r24	; 59
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_2>:

// ISR for INT1
ISR(INT1_vect) {
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	if (ExtInt1_Callback != 0) {
 522:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ExtInt1_Callback>
 526:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ExtInt1_Callback+0x1>
 52a:	30 97       	sbiw	r30, 0x00	; 0
 52c:	09 f0       	breq	.+2      	; 0x530 <__vector_2+0x30>
		ExtInt1_Callback();
 52e:	09 95       	icall
	}
		GICR|=1<<7;
 530:	8b b7       	in	r24, 0x3b	; 59
 532:	80 68       	ori	r24, 0x80	; 128
 534:	8b bf       	out	0x3b, r24	; 59
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_3>:

// ISR for INT2
ISR(INT2_vect) {
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	if (ExtInt2_Callback != 0) {
 57a:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ExtInt2_Callback>
 57e:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ExtInt2_Callback+0x1>
 582:	30 97       	sbiw	r30, 0x00	; 0
 584:	09 f0       	breq	.+2      	; 0x588 <__vector_3+0x30>
		ExtInt2_Callback();
 586:	09 95       	icall
	}
		GICR|=1<<5;
 588:	8b b7       	in	r24, 0x3b	; 59
 58a:	80 62       	ori	r24, 0x20	; 32
 58c:	8b bf       	out	0x3b, r24	; 59
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_11>:
	};

	Timer0_Init(&timer);
}

ISR(TIMER0_OVF_vect) {
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	if (global_timer->Call_Back_Overflow != NULL) {
 5d2:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <global_timer>
 5d6:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <global_timer+0x1>
 5da:	06 80       	ldd	r0, Z+6	; 0x06
 5dc:	f7 81       	ldd	r31, Z+7	; 0x07
 5de:	e0 2d       	mov	r30, r0
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__vector_11+0x36>
		global_timer->Call_Back_Overflow();
 5e4:	09 95       	icall
	}
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_10>:

ISR(TIMER0_COMP_vect) {
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	if (global_timer->Call_Back_Compare != NULL) {
 62a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <global_timer>
 62e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <global_timer+0x1>
 632:	00 84       	ldd	r0, Z+8	; 0x08
 634:	f1 85       	ldd	r31, Z+9	; 0x09
 636:	e0 2d       	mov	r30, r0
 638:	30 97       	sbiw	r30, 0x00	; 0
 63a:	09 f0       	breq	.+2      	; 0x63e <__vector_10+0x36>
		global_timer->Call_Back_Compare();
 63c:	09 95       	icall
	}
}
 63e:	ff 91       	pop	r31
 640:	ef 91       	pop	r30
 642:	bf 91       	pop	r27
 644:	af 91       	pop	r26
 646:	9f 91       	pop	r25
 648:	8f 91       	pop	r24
 64a:	7f 91       	pop	r23
 64c:	6f 91       	pop	r22
 64e:	5f 91       	pop	r21
 650:	4f 91       	pop	r20
 652:	3f 91       	pop	r19
 654:	2f 91       	pop	r18
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
